name: Maintenance

on:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install pip-tools
        run: pip install pip-tools

      - name: Update requirements
        run: |
          pip-compile --upgrade requirements.in
          pip-compile --upgrade requirements-dev.in

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "deps: update Python dependencies"
          title: "ðŸ”„ Weekly dependency updates"
          body: |
            ## Automated Dependency Updates
            
            This PR contains automated updates to Python dependencies.
            
            ### Changes
            - Updated requirements.txt
            - Updated requirements-dev.txt (if exists)
            
            ### Testing
            - [ ] All tests pass
            - [ ] No breaking changes detected
            - [ ] Security vulnerabilities addressed
            
            **Note**: This is an automated PR created by the maintenance workflow.
          branch: deps/weekly-updates
          delete-branch: true
          labels: |
            dependencies
            automated-pr
            maintenance

  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Delete old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '30 days'
          skip-tags: true
          skip-recent: 10

  update-docker-base:
    name: Check Docker Base Image Updates
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for base image updates
        run: |
          # Get current base image
          BASE_IMAGE=$(grep "^FROM" Dockerfile | head -1 | awk '{print $2}')
          echo "Current base image: $BASE_IMAGE"
          
          # Pull latest and check if there are updates
          docker pull $BASE_IMAGE
          
          # This is a placeholder - in practice you'd check for updates
          # and create a PR if the base image has been updated

  security-audit:
    name: Weekly Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Run security audit
        run: |
          # Check for known vulnerabilities
          safety check --json --output safety-audit.json || true
          
          # Static analysis security testing
          bandit -r src/ -f json -o bandit-audit.json || true
          
          # Semgrep security analysis
          semgrep --config=auto --json --output=semgrep-audit.json src/ || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: weekly-security-audit
          path: |
            safety-audit.json
            bandit-audit.json
            semgrep-audit.json

      - name: Check for critical vulnerabilities
        run: |
          # Parse safety report for critical vulnerabilities
          if [ -f safety-audit.json ]; then
            CRITICAL=$(jq '[.vulnerabilities[] | select(.vulnerability.severity == "high" or .vulnerability.severity == "critical")] | length' safety-audit.json)
            if [ "$CRITICAL" -gt 0 ]; then
              echo "ðŸš¨ Found $CRITICAL critical vulnerabilities!"
              # In practice, you'd create an issue or send notifications
            fi
          fi

  check-license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pip-licenses

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          
          # Check for incompatible licenses
          pip-licenses --format=csv | grep -E "(GPL|AGPL|LGPL)" || echo "No copyleft licenses found"

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-compliance
          path: licenses.json

  health-check:
    name: Weekly Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run quick health tests
        run: |
          # Quick smoke tests
          python -c "import sys; sys.path.insert(0, 'src'); import uir; print(f'UIR Framework v{uir.__version__}')"
          
          # Test imports
          python -c "from src.uir.router import RouterService; print('âœ… Router import OK')"
          python -c "from src.uir.client import UIR; print('âœ… Client import OK')"
          python -c "from src.uir.api.main import app; print('âœ… API import OK')"

      - name: Test package build
        run: |
          pip install build
          python -m build --wheel
          echo "âœ… Package builds successfully"

  notify-maintenance:
    name: Send Maintenance Report
    runs-on: ubuntu-latest
    needs: [update-dependencies, cleanup-artifacts, security-audit, check-license-compliance, health-check]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "channel": "#maintenance",
              "username": "UIR Maintenance Bot",
              "text": "ðŸ”§ Weekly maintenance completed for UIR Framework",
              "attachments": [
                {
                  "color": "${{ contains(needs.*.result, 'failure') && 'danger' || 'good' }}",
                  "fields": [
                    {
                      "title": "Dependencies",
                      "value": "${{ needs.update-dependencies.result }}",
                      "short": true
                    },
                    {
                      "title": "Security Audit", 
                      "value": "${{ needs.security-audit.result }}",
                      "short": true
                    },
                    {
                      "title": "License Check",
                      "value": "${{ needs.check-license-compliance.result }}",
                      "short": true
                    },
                    {
                      "title": "Health Check",
                      "value": "${{ needs.health-check.result }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}