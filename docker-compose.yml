version: '3.8'

services:
  # UIR API Service
  uir-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: uir-api
    ports:
      - "8000:8000"
    environment:
      - UIR_API_KEY=${UIR_API_KEY:-development_key}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    depends_on:
      - redis
      - postgres
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    networks:
      - uir-network
    restart: unless-stopped

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: uir-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - uir-network
    restart: unless-stopped

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: uir-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=uir
      - POSTGRES_USER=uir_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployments/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - uir-network
    restart: unless-stopped

  # Elasticsearch for document search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: uir-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - uir-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: uir-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployments/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - uir-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: uir-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployments/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployments/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - uir-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  uir-network:
    driver: bridge